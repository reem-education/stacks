"""autogenerated by genpy from play_motion/PlayMotionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class PlayMotionGoal(genpy.Message):
  _md5sum = "5d4c35ed5e1cf693ac81f319cc4053eb"
  _type = "play_motion/PlayMotionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
string motion_name
duration reach_time
int32 priority

"""
  __slots__ = ['motion_name','reach_time','priority']
  _slot_types = ['string','duration','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motion_name,reach_time,priority

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlayMotionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motion_name is None:
        self.motion_name = ''
      if self.reach_time is None:
        self.reach_time = genpy.Duration()
      if self.priority is None:
        self.priority = 0
    else:
      self.motion_name = ''
      self.reach_time = genpy.Duration()
      self.priority = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.motion_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.reach_time.secs, _x.reach_time.nsecs, _x.priority))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.reach_time is None:
        self.reach_time = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_name = str[start:end].decode('utf-8')
      else:
        self.motion_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.reach_time.secs, _x.reach_time.nsecs, _x.priority,) = _struct_3i.unpack(str[start:end])
      self.reach_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.motion_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.reach_time.secs, _x.reach_time.nsecs, _x.priority))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.reach_time is None:
        self.reach_time = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_name = str[start:end].decode('utf-8')
      else:
        self.motion_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.reach_time.secs, _x.reach_time.nsecs, _x.priority,) = _struct_3i.unpack(str[start:end])
      self.reach_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")
